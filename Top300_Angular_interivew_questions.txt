#### Angular Basics and Architecture (18 Questions)
1. What is Angular, and why is it used for web development?
2. How does Angular differ from AngularJS?
3. What is TypeScript, and why is it used in Angular?
4. Explain the component-based architecture of Angular.
5. What is the purpose of the angular.json file in an Angular project?
6. How does an Angular application bootstrap?
7. What is the role of the main.ts file in Angular?
8. What are NgModules, and why are they used?
9. Explain the difference between a module and a component in Angular.
10. What is the purpose of the @NgModule decorator?
11. How does Angular handle dependency injection?
12. What is the difference between a provider and an injectable in Angular?
13. Explain the concept of Single Page Applications (SPAs) in Angular.
14. What is the Angular CLI, and what are its common commands?
15. What is the difference between JIT and AOT compilation in Angular?
16. Why is AOT compilation preferred for production builds?
17. How does Angular differ from React or Vue in terms of architecture?
18. what is the use of environment.ts file?

#### Components and Templates (33 Questions)
19. What is a component in Angular, and how is it defined?
20. What is the @Component decorator, and what are its key properties?
21. Explain the role of templates in Angular components.
22. What is the difference between template and templateUrl in a component?
23. How does Angular handle component lifecycle hooks?
24. List all Angular lifecycle hooks and their purposes.
25. What is the difference between ngOnInit and constructor in a component?
26. How can you pass data to a component using @Input?
27. What is the purpose of @Output and EventEmitter in Angular?
28. How do you create a dynamic component in Angular?
29. What is ViewEncapsulation in Angular, and what are its types?
30. How does Angular handle component communication?
31. What is the difference between ViewChild and ViewChildren?
32. How do you access a DOM element in an Angular component?
33. What is Content Projection in Angular, and how is it implemented?
34. Explain the use of ng-content in Angular components.
35. How can you style a component in Angular?
36. How do you handle conditional rendering in Angular templates? 
37. What is the purpose of the *ngIf directive in Angular?
38. How would you handle a scenario where a component’s template is rendering outdated data due to asynchronous updates?
39. Imagine a component needs to display a large dataset (e.g., 10,000 rows). How would you optimize its rendering performance?
40. If a parent component’s @Input changes frequently, how would you prevent unnecessary re-renders in a child component?
41. Suppose you have a component that renders a complex form, but users complain it’s slow. How would you diagnose and fix the issue?
42. How would you implement a component that dynamically switches between multiple layouts based on user input?
43. In a scenario where a component’s ViewChild is undefined during ngOnInit, how would you troubleshoot and resolve it?
44. How would you create a reusable modal component that can display different content based on the caller?
45. If a component’s template throws a runtime error due to a missing property, how would you debug and prevent this in the future?
46. Suppose you need to share state between two sibling components without a parent-child relationship. What approach would you take?
47. How would you handle a scenario where a component’s lifecycle hook is called unexpectedly multiple times?
48. Imagine you’re tasked with creating a drag-and-drop interface in Angular. How would you implement it?
49. If a component’s template is deeply nested, causing performance issues, how would you refactor it?
50. How would you implement a component that supports both light and dark themes dynamically?
51. Suppose a user reports that a component’s UI is not updating after a state change. How would you investigate?
52. How would you handle a scenario where a component needs to render content conditionally based on user permissions?

#### Directives and Pipes (25 Questions)
53. What are directives in Angular, and how are they used?
54. What is the difference between a component directive and an attribute directive?
55. Name some built-in Angular directives.
56. How do you create a custom directive in Angular?
57. What is the purpose of the *ngFor directive?
58. Explain the difference between *ngFor and ng-repeat.
59. How does the ngClass directive work? 
60. What is the purpose of the ngStyle directive?
61. How do you create a structural directive in Angular?
62. What are pipes in Angular, and how are they used?
63. Name some built-in Angular pipes.
64. How do you create a custom pipe in Angular?
65. What is the difference between pure and impure pipes?
66. How does the async pipe work in Angular?
67. How can you chain multiple pipes in Angular?
68. What is the purpose of the slice pipe?
69. How do you pass parameters to a custom pipe?
70. How do you debug a custom directive or pipe in Angular?
71. How would you create a custom directive to highlight table rows based on dynamic conditions (e.g., value thresholds)?
72. If a custom directive is not applying changes to the DOM as expected, how would you debug it?
73. Suppose you need a directive to restrict input to only numbers in a text field. How would you implement it?
74. How would you create a pipe to format a dataset (e.g., currency conversion) based on user-selected locale?
75. In a scenario where an impure pipe is causing performance issues, how would you refactor it to be pure?
76. If a structural directive like *ngFor is rendering incorrect data due to an array mutation, how would you fix it?
77. How would you implement a directive to add tooltips dynamically based on element content?
78. Suppose a custom pipe is not updating when its input changes. What could be the issue, and how would you resolve it?
79. How would you create a directive to handle click events outside a component (e.g., closing a dropdown)?
80. If a team member overuses pipes in a template, causing slow rendering, how would you optimize it?

#### Data Binding and Forms (35 Questions)
81. What is data binding in Angular, and what are its types?
82. Explain one-way data binding in Angular.
83. How does two-way data binding work in Angular?
84. What is interpolation in Angular, and how is it used?
85. What is property binding, and how does it differ from interpolation?
86. Explain event binding in Angular with an example.
87. How does Angular handle two-way binding with ngModel?
88. What are Reactive Forms in Angular?
89. What is the difference between Template-driven and Reactive Forms?
90. How do you create a form control in Reactive Forms?
91. What is FormGroup and FormControl in Angular?
92. How do you validate forms in Angular?
93. What are the common form validators in Angular?
94. How do you create a custom validator in Angular?
95. What is the purpose of FormBuilder in Angular?
96. How do you handle form submission in Angular?
97. What is the difference between dirty and pristine states in a form?
98. How do you reset a form in Angular?
99. What is the purpose of the ngForm directive?
100. How do you handle cross-field validation in Angular forms?
101. How would you handle a scenario where two-way binding with ngModel causes infinite loops?
102. Suppose a reactive form’s validation is not triggering as expected. How would you debug the issue?
103. If a form control’s value changes unexpectedly due to user input, how would you track and handle it?
104. How would you implement a dynamic form where fields are added or removed based on user actions?
105. In a scenario where a form submission fails due to a server error, how would you provide user feedback?
106. Suppose you need to sync form data across multiple tabs in a browser. How would you approach this?
107. How would you handle a large reactive form with dozens of fields to ensure it remains performant?
108. If a template-driven form is not binding data correctly, what steps would you take to diagnose the issue?
109. How would you implement a custom form control that integrates with Angular’s ControlValueAccessor?
110. Suppose a form needs to support autosave functionality. How would you implement it efficiently?
111. In a scenario where form validators are slowing down the UI, how would you optimize them?
112. How would you handle a form that needs to support both synchronous and asynchronous validation?
113. If a user submits a form with invalid data, how would you display field-specific error messages?
114. How would you implement a form that supports undo/redo functionality for user inputs?
115. Suppose a reactive form’s valueChanges observable is firing too frequently. How would you throttle it?

#### Services and Dependency Injection (25 Questions)
116. What is a service in Angular, and how is it created?
117. How do you inject a service into a component?
118. What is the role of the @Injectable decorator?
119. Explain the concept of hierarchical dependency injection in Angular.
120. What is the difference between providedIn: 'root' and module-level providers?
121. How do you create a singleton service in Angular?
122. What is the purpose of the Injector in Angular?
123. How do you pass data between services in Angular?
124. What is the difference between a service and a component?
125. How do you handle HTTP requests in an Angular service?
126. What is the HttpClient module, and how is it used?
127. How do you handle errors in HTTP requests in Angular?
128. What is the purpose of the HttpInterceptor in Angular?
129. How do you mock a service for testing in Angular?
130. What are the best practices for structuring services in Angular?
131. If a service’s HTTP request is failing intermittently, how would you debug and handle the issue?
132. How would you implement a caching mechanism in a service to reduce HTTP calls?
133. Suppose a service is instantiated multiple times unexpectedly. How would you ensure it remains a singleton?
134. In a scenario where a service depends on multiple other services, how would you manage circular dependencies?
135. How would you create a service to handle real-time updates using WebSockets in Angular?
136. If a service’s data is not updating components as expected, how would you troubleshoot?
137. How would you implement a service to handle file uploads with progress tracking?
138. Suppose a service needs to share data across unrelated components. What approach would you use?
139. How would you refactor a monolithic service into smaller, more manageable services?
140. If a service’s dependency injection causes performance issues, how would you optimize it?

#### Routing and Navigation (35 Questions)
141. What is routing in Angular, and how is it implemented?
142. How do you configure routes in an Angular application?
143. What is the RouterModule in Angular?
144. Explain the difference between RouterLink and Router.navigate.
145. What is a route guard in Angular, and what are its types?
146. How do you implement a CanActivate guard?
147. What is the purpose of the CanDeactivate guard?
148. How do you handle route parameters in Angular?
149. What is the difference between query parameters and route parameters?
150. How do you implement lazy loading in Angular?
151. What is the benefit of lazy loading modules?
152. How do you preload lazy-loaded modules in Angular?
153. What is a resolver in Angular, and how is it used?
154. How do you handle 404 errors in Angular routing?
155. What is the purpose of the RouterOutlet directive?
156. How do you navigate programmatically in Angular?
157. What is the difference between path and pathMatch in route configuration?
158. How do you protect routes using authentication in Angular?
159. What is the purpose of the ActivatedRoute service?
160. How do you handle nested routes in Angular?
161. How would you handle a scenario where a route guard is blocking access incorrectly?
162. Suppose a user navigates away from a form with unsaved changes. How would you prompt them to save?
163. If a lazy-loaded module fails to load due to a network issue, how would you handle it gracefully?
164. How would you implement a breadcrumb navigation system based on Angular routes?
165. In a scenario where query parameters are not persisting across routes, how would you fix it?
166. How would you optimize routing for a large application with hundreds of routes?
167. Suppose a resolver is taking too long to fetch data. How would you improve the user experience?
168. How would you implement a route animation when navigating between pages?
169. If a nested route is not rendering its component, what steps would you take to debug?
170. How would you handle dynamic routing based on user roles or permissions?
171. Suppose a route’s data is not updating after navigation. How would you investigate?
172. How would you implement a fallback route for unauthorized users?
173. In a scenario where a route’s parameters are causing errors, how would you validate them?
174. How would you handle deep linking in an Angular SPA for SEO purposes?
175. If a user navigates to an invalid route, how would you redirect them to a custom error page?

#### RxJS and Observables (30 Questions)
176. What is RxJS, and how is it used in Angular?
177. What is an Observable in Angular?
178. How does an Observable differ from a Promise?
179. What is the purpose of the subscribe method in RxJS?
180. How do you unsubscribe from an Observable?
181. What are Subjects in RxJS, and how are they used?
182. Explain the difference between Subject, BehaviorSubject, and ReplaySubject.
183. What are RxJS operators, and how are they used?
184. Name some commonly used RxJS operators in Angular.
185. How do you chain RxJS operators in Angular?
186. What is the purpose of the map operator in RxJS?
187. How does the switchMap operator work?
188. What is the difference between mergeMap and concatMap?
189. How do you handle errors in RxJS Observables?
190. What is the purpose of the catchError operator?
191. How do you combine multiple Observables in Angular?
192. What is the forkJoin operator, and when is it used?
193. How do you use the async pipe with Observables?
194. What is the purpose of the debounceTime operator?
195. How do you test RxJS Observables in Angular?
196. How would you handle a scenario where an Observable emits too frequently, causing UI lag?
197. Suppose you need to combine data from multiple API calls before rendering. How would you use RxJS?
198. If an Observable subscription is causing a memory leak, how would you detect and fix it?
199. How would you implement a retry mechanism for failed HTTP requests using RxJS?
200. In a scenario where an Observable’s data is not reaching a component, how would you debug?
201. How would you use RxJS to implement a polling mechanism for real-time data updates?
202. Suppose you need to cancel an ongoing HTTP request when a user navigates away. How would you do it?
203. How would you handle race conditions in multiple concurrent Observables?
204. If a component needs to react to multiple Observables simultaneously, how would you manage it?
205. How would you implement a typeahead search using RxJS in Angular?
206. Suppose an RxJS operator chain is producing unexpected results. How would you debug it?
207. How would you use RxJS to handle a scenario where API responses need to be batched?
208. If a BehaviorSubject is not emitting the latest value, what could be the issue?
209. How would you combine RxJS with Angular’s change detection for optimal performance?
210. In a scenario where an Observable needs to emit only unique values, how would you implement it?

#### Performance Optimization (20 Questions)
211. What are some techniques to optimize Angular application performance?
212. How does lazy loading improve Angular performance?
213. What is change detection in Angular?
214. Explain the difference between Default and OnPush change detection strategies.
215. How do you implement OnPush change detection in a component?
216. What is the purpose of the ChangeDetectorRef in Angular?
217. How does Angular’s zone.js work?
218. What is NgZone, and how is it used to optimize performance?
219. How do you reduce bundle size in an Angular application?
220. What is tree shaking in Angular, and how does it work?
221. How do you optimize Angular templates for performance?
222. What is the benefit of using trackBy with *ngFor?
223. How do you handle memory leaks in Angular applications?
224. What is incremental hydration in Angular 19?
225. How does zoneless change detection improve performance?
226. If an Angular application is slow to load initially, how would you diagnose and optimize it?
227. Suppose a component’s change detection is triggered unnecessarily. How would you identify and fix it?
228. How would you optimize an Angular app for mobile devices with limited resources?
229. In a scenario where a large list is causing browser freezes, how would you implement virtual scrolling?
230. How would you handle performance issues in an Angular app with multiple third-party libraries?
231. Suppose an application’s bundle size is too large. What steps would you take to reduce it?
232. How would you optimize an Angular app for low-bandwidth users?
233. If an Angular app is consuming excessive memory, how would you profile and address it?
234. How would you implement server-side prerendering to improve initial load time?
235. Suppose a component’s frequent updates are causing jank. How would you mitigate it?

#### Testing in Angular (24 Questions)
236. What are the testing frameworks used in Angular?
237. How do you set up unit testing in Angular?
238. What is TestBed in Angular, and how is it used?
239. How do you test a component in Angular?
240. What is the purpose of the ComponentFixture in Angular testing?
241. How do you mock dependencies in Angular unit tests?
242. What is Jasmine, and how is it used in Angular testing?
243. What is Karma, and how does it work with Angular?
244. How do you test a service in Angular?
245. What are Angular Component Test Harnesses?
246. How do you write end-to-end (E2E) tests in Angular?
247. What is Protractor, and how is it used for E2E testing?
248. How do you test directives in Angular?
249. How do you test pipes in Angular?
250. If a unit test for a component fails intermittently, how would you investigate the cause?
251. How would you write a test to verify a component’s interaction with a service?
252. Suppose an E2E test fails due to timing issues. How would you stabilize it?
253. How would you test a component that depends on browser APIs like localStorage?
254. In a scenario where a test suite is slow, how would you optimize the test execution time?
255. How would you mock an HTTP backend for testing Angular services?
256. If a component’s test fails due to a missing dependency, how would you resolve it?
257. How would you test a directive that manipulates the DOM dynamically?
258. Suppose a production bug is not reproducible in tests. How would you approach debugging?
259. How would you set up automated testing for an Angular app in a CI/CD pipeline?

#### Angular CLI and Build Tools (19 Questions)
260. What is the Angular CLI, and what are its benefits?
261. How do you create a new Angular project using the CLI?
262. What is the purpose of the ng generate command?
263. How do you build an Angular application for production?
264. What is the difference between ng build and ng serve?
265. How do you add a third-party library to an Angular project?
266. What is the purpose of the ng update command?
267. How do you configure environment variables in Angular?
268. What are schematics in Angular CLI?
269. How do you customize the Angular CLI build process?
270. Suppose an Angular application fails to run on an older browser like IE11. How would you configure polyfills to ensure compatibility?
271. If a new browser feature is not supported in some target browsers, how would you add a custom polyfill to an Angular project?
272. In a scenario where including all polyfills increases the bundle size significantly, how would you optimize the polyfill configuration?
273. How would you debug an issue where a polyfill in `polyfills.ts` is not loading correctly in an Angular application?
274. Suppose a client requires an Angular app to support a legacy browser. What steps would you take to identify and include the necessary polyfills?
275. If a dependency in `package.json` causes a version conflict in an Angular project, how would you resolve it?
276. Suppose you need to add a custom script to `package.json` to automate a build task in an Angular project. How would you implement and test it?
277. In a scenario where `npm install` fails due to an outdated `package.json`, how would you update dependencies safely?
278. How would you configure `package.json` to ensure consistent Angular CLI versions across a team’s development environment?
279. If a third-party library listed in `package.json` breaks after an Angular upgrade, what steps would you take to diagnose and fix the issue?

#### Angular 19 and Recent Features (10 Questions)
280. What are standalone components in Angular 19?
281. How do you migrate a project to use standalone components?
282. What is incremental hydration in Angular 19?
283. How does the route-level render mode work in Angular 19?
284. What are linked signals in Angular 19?
285. How does the resource API improve async operations in Angular 19?
286. What is zoneless change detection, and how is it implemented?
287. How does Angular Material enhance development in Angular 19?
288. What are the benefits of Hot Module Replacement (HMR) in Angular?
289. How do you use the ng update command to upgrade to Angular 19?

#### State Management and Advanced Topics (14 Questions)
290. What are the common state management solutions in Angular?
291. How do you implement NgRx in an Angular application?
292. What is the difference between NgRx Store and Redux?
293. How do you handle global state in Angular?
294. What is the purpose of the async pipe in state management?
295. How do you implement token-based authentication in Angular?
296. What is Server-Side Rendering (SSR) in Angular?
297. How does Angular Universal work?
298. What is the purpose of the APP_INITIALIZER token?
299. How do you implement internationalization (i18n) in Angular?
300. What is the difference between Angular’s HttpClient and fetch API?
301. How do you secure an Angular application?
302. What is the purpose of the Angular Animation module?
303. How do you create animations in Angular?
